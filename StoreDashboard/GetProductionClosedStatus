CREATE OR ALTER PROCEDURE GetProductionClosedStatus
    @Sloc_Code VARCHAR(50) = NULL  -- Optional filter parameter
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        SC.Supv_ID,
        CONCAT(SC.Sup_Code, ' - ', SC.Sup_Name) AS Sup_Name,

        -- Total created orders
        COUNT(DISTINCT OC.Ordcre_ID) AS [No. of Orders],

        -- Total closed orders (via Order_No)
        COUNT(DISTINCT C.Ordcld_ID) AS [No. of Orders Closed],

        -- On-time / Delay
        COUNT(CASE WHEN TP.Ontime_or_Delay = 'Ontime' THEN 1 END) AS [Issue Posted on Time],
        COUNT(CASE WHEN TP.Ontime_or_Delay = 'Delay' THEN 1 END) AS [Issue Posted Delay]

    FROM TrnSap_Order_creation OC

    -- Join supervisor from creation table
    INNER JOIN Mst_SupvCode SC ON OC.Sup_Code = SC.Sup_Code

    -- Join closed orders via Order_No
    LEFT JOIN TrnSap_Order_Closed C ON OC.Order_No = C.Order_No

    -- Join production status via Order_No + Supv_ID
    LEFT JOIN Trn_prod_order_status TP ON TP.Order_No = OC.Order_No AND TP.Supv_ID = SC.Supv_ID

    -- Optional Sloc filter (latest per order)
    LEFT JOIN (
        SELECT Order_No, Sloc_Code
        FROM (
            SELECT *,
                   ROW_NUMBER() OVER (PARTITION BY Order_No ORDER BY Created_On DESC) AS rn
            FROM TrnSap_Order_creation
        ) AS sub
        WHERE rn = 1
    ) AS OC_SLOC ON OC.Order_No = OC_SLOC.Order_No

   WHERE (@Sloc_Code IS NULL OR OC_SLOC.Sloc_Code = @Sloc_Code)

    GROUP BY SC.Supv_ID, SC.Sup_Code, SC.Sup_Name;
END;
